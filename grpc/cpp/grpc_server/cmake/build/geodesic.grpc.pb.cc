// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: geodesic.proto

#include "geodesic.pb.h"
#include "geodesic.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace geodesic_gRPC {

static const char* Geodesic_method_names[] = {
  "/geodesic_gRPC.Geodesic/SayHello",
  "/geodesic_gRPC.Geodesic/FindPathByVertexCord",
};

std::unique_ptr< Geodesic::Stub> Geodesic::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Geodesic::Stub> stub(new Geodesic::Stub(channel));
  return stub;
}

Geodesic::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SayHello_(Geodesic_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_FindPathByVertexCord_(Geodesic_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Geodesic::Stub::SayHello(::grpc::ClientContext* context, const ::geodesic_gRPC::HelloRequest& request, ::geodesic_gRPC::HelloReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SayHello_, context, request, response);
}

void Geodesic::Stub::experimental_async::SayHello(::grpc::ClientContext* context, const ::geodesic_gRPC::HelloRequest* request, ::geodesic_gRPC::HelloReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SayHello_, context, request, response, std::move(f));
}

void Geodesic::Stub::experimental_async::SayHello(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::geodesic_gRPC::HelloReply* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SayHello_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::geodesic_gRPC::HelloReply>* Geodesic::Stub::AsyncSayHelloRaw(::grpc::ClientContext* context, const ::geodesic_gRPC::HelloRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::geodesic_gRPC::HelloReply>::Create(channel_.get(), cq, rpcmethod_SayHello_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::geodesic_gRPC::HelloReply>* Geodesic::Stub::PrepareAsyncSayHelloRaw(::grpc::ClientContext* context, const ::geodesic_gRPC::HelloRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::geodesic_gRPC::HelloReply>::Create(channel_.get(), cq, rpcmethod_SayHello_, context, request, false);
}

::grpc::Status Geodesic::Stub::FindPathByVertexCord(::grpc::ClientContext* context, const ::geodesic_gRPC::FindPathByVertexCordRequest& request, ::geodesic_gRPC::Path* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_FindPathByVertexCord_, context, request, response);
}

void Geodesic::Stub::experimental_async::FindPathByVertexCord(::grpc::ClientContext* context, const ::geodesic_gRPC::FindPathByVertexCordRequest* request, ::geodesic_gRPC::Path* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_FindPathByVertexCord_, context, request, response, std::move(f));
}

void Geodesic::Stub::experimental_async::FindPathByVertexCord(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::geodesic_gRPC::Path* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_FindPathByVertexCord_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::geodesic_gRPC::Path>* Geodesic::Stub::AsyncFindPathByVertexCordRaw(::grpc::ClientContext* context, const ::geodesic_gRPC::FindPathByVertexCordRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::geodesic_gRPC::Path>::Create(channel_.get(), cq, rpcmethod_FindPathByVertexCord_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::geodesic_gRPC::Path>* Geodesic::Stub::PrepareAsyncFindPathByVertexCordRaw(::grpc::ClientContext* context, const ::geodesic_gRPC::FindPathByVertexCordRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::geodesic_gRPC::Path>::Create(channel_.get(), cq, rpcmethod_FindPathByVertexCord_, context, request, false);
}

Geodesic::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Geodesic_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Geodesic::Service, ::geodesic_gRPC::HelloRequest, ::geodesic_gRPC::HelloReply>(
          std::mem_fn(&Geodesic::Service::SayHello), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Geodesic_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Geodesic::Service, ::geodesic_gRPC::FindPathByVertexCordRequest, ::geodesic_gRPC::Path>(
          std::mem_fn(&Geodesic::Service::FindPathByVertexCord), this)));
}

Geodesic::Service::~Service() {
}

::grpc::Status Geodesic::Service::SayHello(::grpc::ServerContext* context, const ::geodesic_gRPC::HelloRequest* request, ::geodesic_gRPC::HelloReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Geodesic::Service::FindPathByVertexCord(::grpc::ServerContext* context, const ::geodesic_gRPC::FindPathByVertexCordRequest* request, ::geodesic_gRPC::Path* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace geodesic_gRPC

