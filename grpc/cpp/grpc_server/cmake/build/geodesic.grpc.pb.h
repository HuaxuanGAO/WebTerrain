// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: geodesic.proto
#ifndef GRPC_geodesic_2eproto__INCLUDED
#define GRPC_geodesic_2eproto__INCLUDED

#include "geodesic.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace geodesic_gRPC {

// The greeting service definition.
class Geodesic final {
 public:
  static constexpr char const* service_full_name() {
    return "geodesic_gRPC.Geodesic";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Sends a greeting
    virtual ::grpc::Status SayHello(::grpc::ClientContext* context, const ::geodesic_gRPC::HelloRequest& request, ::geodesic_gRPC::HelloReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::geodesic_gRPC::HelloReply>> AsyncSayHello(::grpc::ClientContext* context, const ::geodesic_gRPC::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::geodesic_gRPC::HelloReply>>(AsyncSayHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::geodesic_gRPC::HelloReply>> PrepareAsyncSayHello(::grpc::ClientContext* context, const ::geodesic_gRPC::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::geodesic_gRPC::HelloReply>>(PrepareAsyncSayHelloRaw(context, request, cq));
    }
    // request shortest path using vertex id
    virtual ::grpc::Status FindPathByVertexID(::grpc::ClientContext* context, const ::geodesic_gRPC::FindPathByVertexIDRequest& request, ::geodesic_gRPC::Path* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::geodesic_gRPC::Path>> AsyncFindPathByVertexID(::grpc::ClientContext* context, const ::geodesic_gRPC::FindPathByVertexIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::geodesic_gRPC::Path>>(AsyncFindPathByVertexIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::geodesic_gRPC::Path>> PrepareAsyncFindPathByVertexID(::grpc::ClientContext* context, const ::geodesic_gRPC::FindPathByVertexIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::geodesic_gRPC::Path>>(PrepareAsyncFindPathByVertexIDRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Sends a greeting
      virtual void SayHello(::grpc::ClientContext* context, const ::geodesic_gRPC::HelloRequest* request, ::geodesic_gRPC::HelloReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SayHello(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::geodesic_gRPC::HelloReply* response, std::function<void(::grpc::Status)>) = 0;
      // request shortest path using vertex id
      virtual void FindPathByVertexID(::grpc::ClientContext* context, const ::geodesic_gRPC::FindPathByVertexIDRequest* request, ::geodesic_gRPC::Path* response, std::function<void(::grpc::Status)>) = 0;
      virtual void FindPathByVertexID(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::geodesic_gRPC::Path* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::geodesic_gRPC::HelloReply>* AsyncSayHelloRaw(::grpc::ClientContext* context, const ::geodesic_gRPC::HelloRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::geodesic_gRPC::HelloReply>* PrepareAsyncSayHelloRaw(::grpc::ClientContext* context, const ::geodesic_gRPC::HelloRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::geodesic_gRPC::Path>* AsyncFindPathByVertexIDRaw(::grpc::ClientContext* context, const ::geodesic_gRPC::FindPathByVertexIDRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::geodesic_gRPC::Path>* PrepareAsyncFindPathByVertexIDRaw(::grpc::ClientContext* context, const ::geodesic_gRPC::FindPathByVertexIDRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status SayHello(::grpc::ClientContext* context, const ::geodesic_gRPC::HelloRequest& request, ::geodesic_gRPC::HelloReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::geodesic_gRPC::HelloReply>> AsyncSayHello(::grpc::ClientContext* context, const ::geodesic_gRPC::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::geodesic_gRPC::HelloReply>>(AsyncSayHelloRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::geodesic_gRPC::HelloReply>> PrepareAsyncSayHello(::grpc::ClientContext* context, const ::geodesic_gRPC::HelloRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::geodesic_gRPC::HelloReply>>(PrepareAsyncSayHelloRaw(context, request, cq));
    }
    ::grpc::Status FindPathByVertexID(::grpc::ClientContext* context, const ::geodesic_gRPC::FindPathByVertexIDRequest& request, ::geodesic_gRPC::Path* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::geodesic_gRPC::Path>> AsyncFindPathByVertexID(::grpc::ClientContext* context, const ::geodesic_gRPC::FindPathByVertexIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::geodesic_gRPC::Path>>(AsyncFindPathByVertexIDRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::geodesic_gRPC::Path>> PrepareAsyncFindPathByVertexID(::grpc::ClientContext* context, const ::geodesic_gRPC::FindPathByVertexIDRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::geodesic_gRPC::Path>>(PrepareAsyncFindPathByVertexIDRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void SayHello(::grpc::ClientContext* context, const ::geodesic_gRPC::HelloRequest* request, ::geodesic_gRPC::HelloReply* response, std::function<void(::grpc::Status)>) override;
      void SayHello(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::geodesic_gRPC::HelloReply* response, std::function<void(::grpc::Status)>) override;
      void FindPathByVertexID(::grpc::ClientContext* context, const ::geodesic_gRPC::FindPathByVertexIDRequest* request, ::geodesic_gRPC::Path* response, std::function<void(::grpc::Status)>) override;
      void FindPathByVertexID(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::geodesic_gRPC::Path* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::geodesic_gRPC::HelloReply>* AsyncSayHelloRaw(::grpc::ClientContext* context, const ::geodesic_gRPC::HelloRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::geodesic_gRPC::HelloReply>* PrepareAsyncSayHelloRaw(::grpc::ClientContext* context, const ::geodesic_gRPC::HelloRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::geodesic_gRPC::Path>* AsyncFindPathByVertexIDRaw(::grpc::ClientContext* context, const ::geodesic_gRPC::FindPathByVertexIDRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::geodesic_gRPC::Path>* PrepareAsyncFindPathByVertexIDRaw(::grpc::ClientContext* context, const ::geodesic_gRPC::FindPathByVertexIDRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SayHello_;
    const ::grpc::internal::RpcMethod rpcmethod_FindPathByVertexID_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Sends a greeting
    virtual ::grpc::Status SayHello(::grpc::ServerContext* context, const ::geodesic_gRPC::HelloRequest* request, ::geodesic_gRPC::HelloReply* response);
    // request shortest path using vertex id
    virtual ::grpc::Status FindPathByVertexID(::grpc::ServerContext* context, const ::geodesic_gRPC::FindPathByVertexIDRequest* request, ::geodesic_gRPC::Path* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SayHello() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* context, const ::geodesic_gRPC::HelloRequest* request, ::geodesic_gRPC::HelloReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSayHello(::grpc::ServerContext* context, ::geodesic_gRPC::HelloRequest* request, ::grpc::ServerAsyncResponseWriter< ::geodesic_gRPC::HelloReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_FindPathByVertexID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_FindPathByVertexID() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_FindPathByVertexID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindPathByVertexID(::grpc::ServerContext* context, const ::geodesic_gRPC::FindPathByVertexIDRequest* request, ::geodesic_gRPC::Path* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindPathByVertexID(::grpc::ServerContext* context, ::geodesic_gRPC::FindPathByVertexIDRequest* request, ::grpc::ServerAsyncResponseWriter< ::geodesic_gRPC::Path>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SayHello<WithAsyncMethod_FindPathByVertexID<Service > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SayHello() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::geodesic_gRPC::HelloRequest, ::geodesic_gRPC::HelloReply>(
          [this](::grpc::ServerContext* context,
                 const ::geodesic_gRPC::HelloRequest* request,
                 ::geodesic_gRPC::HelloReply* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->SayHello(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* context, const ::geodesic_gRPC::HelloRequest* request, ::geodesic_gRPC::HelloReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SayHello(::grpc::ServerContext* context, const ::geodesic_gRPC::HelloRequest* request, ::geodesic_gRPC::HelloReply* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_FindPathByVertexID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_FindPathByVertexID() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::geodesic_gRPC::FindPathByVertexIDRequest, ::geodesic_gRPC::Path>(
          [this](::grpc::ServerContext* context,
                 const ::geodesic_gRPC::FindPathByVertexIDRequest* request,
                 ::geodesic_gRPC::Path* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->FindPathByVertexID(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_FindPathByVertexID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindPathByVertexID(::grpc::ServerContext* context, const ::geodesic_gRPC::FindPathByVertexIDRequest* request, ::geodesic_gRPC::Path* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void FindPathByVertexID(::grpc::ServerContext* context, const ::geodesic_gRPC::FindPathByVertexIDRequest* request, ::geodesic_gRPC::Path* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_SayHello<ExperimentalWithCallbackMethod_FindPathByVertexID<Service > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SayHello() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* context, const ::geodesic_gRPC::HelloRequest* request, ::geodesic_gRPC::HelloReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_FindPathByVertexID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_FindPathByVertexID() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_FindPathByVertexID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindPathByVertexID(::grpc::ServerContext* context, const ::geodesic_gRPC::FindPathByVertexIDRequest* request, ::geodesic_gRPC::Path* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SayHello() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* context, const ::geodesic_gRPC::HelloRequest* request, ::geodesic_gRPC::HelloReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSayHello(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_FindPathByVertexID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_FindPathByVertexID() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_FindPathByVertexID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindPathByVertexID(::grpc::ServerContext* context, const ::geodesic_gRPC::FindPathByVertexIDRequest* request, ::geodesic_gRPC::Path* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFindPathByVertexID(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SayHello() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->SayHello(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* context, const ::geodesic_gRPC::HelloRequest* request, ::geodesic_gRPC::HelloReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void SayHello(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_FindPathByVertexID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_FindPathByVertexID() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->FindPathByVertexID(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_FindPathByVertexID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status FindPathByVertexID(::grpc::ServerContext* context, const ::geodesic_gRPC::FindPathByVertexIDRequest* request, ::geodesic_gRPC::Path* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void FindPathByVertexID(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SayHello : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SayHello() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::geodesic_gRPC::HelloRequest, ::geodesic_gRPC::HelloReply>(std::bind(&WithStreamedUnaryMethod_SayHello<BaseClass>::StreamedSayHello, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SayHello() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SayHello(::grpc::ServerContext* context, const ::geodesic_gRPC::HelloRequest* request, ::geodesic_gRPC::HelloReply* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSayHello(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::geodesic_gRPC::HelloRequest,::geodesic_gRPC::HelloReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_FindPathByVertexID : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_FindPathByVertexID() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::geodesic_gRPC::FindPathByVertexIDRequest, ::geodesic_gRPC::Path>(std::bind(&WithStreamedUnaryMethod_FindPathByVertexID<BaseClass>::StreamedFindPathByVertexID, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_FindPathByVertexID() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status FindPathByVertexID(::grpc::ServerContext* context, const ::geodesic_gRPC::FindPathByVertexIDRequest* request, ::geodesic_gRPC::Path* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFindPathByVertexID(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::geodesic_gRPC::FindPathByVertexIDRequest,::geodesic_gRPC::Path>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SayHello<WithStreamedUnaryMethod_FindPathByVertexID<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SayHello<WithStreamedUnaryMethod_FindPathByVertexID<Service > > StreamedService;
};

}  // namespace geodesic_gRPC


#endif  // GRPC_geodesic_2eproto__INCLUDED
