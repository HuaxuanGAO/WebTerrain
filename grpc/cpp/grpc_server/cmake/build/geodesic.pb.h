// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: geodesic.proto

#ifndef PROTOBUF_INCLUDED_geodesic_2eproto
#define PROTOBUF_INCLUDED_geodesic_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_geodesic_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_geodesic_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_geodesic_2eproto();
namespace geodesic_gRPC {
class FindPathByVertexCordRequest;
class FindPathByVertexCordRequestDefaultTypeInternal;
extern FindPathByVertexCordRequestDefaultTypeInternal _FindPathByVertexCordRequest_default_instance_;
class HelloReply;
class HelloReplyDefaultTypeInternal;
extern HelloReplyDefaultTypeInternal _HelloReply_default_instance_;
class HelloRequest;
class HelloRequestDefaultTypeInternal;
extern HelloRequestDefaultTypeInternal _HelloRequest_default_instance_;
class Path;
class PathDefaultTypeInternal;
extern PathDefaultTypeInternal _Path_default_instance_;
}  // namespace geodesic_gRPC
namespace google {
namespace protobuf {
template<> ::geodesic_gRPC::FindPathByVertexCordRequest* Arena::CreateMaybeMessage<::geodesic_gRPC::FindPathByVertexCordRequest>(Arena*);
template<> ::geodesic_gRPC::HelloReply* Arena::CreateMaybeMessage<::geodesic_gRPC::HelloReply>(Arena*);
template<> ::geodesic_gRPC::HelloRequest* Arena::CreateMaybeMessage<::geodesic_gRPC::HelloRequest>(Arena*);
template<> ::geodesic_gRPC::Path* Arena::CreateMaybeMessage<::geodesic_gRPC::Path>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace geodesic_gRPC {

// ===================================================================

class HelloRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:geodesic_gRPC.HelloRequest) */ {
 public:
  HelloRequest();
  virtual ~HelloRequest();

  HelloRequest(const HelloRequest& from);

  inline HelloRequest& operator=(const HelloRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HelloRequest(HelloRequest&& from) noexcept
    : HelloRequest() {
    *this = ::std::move(from);
  }

  inline HelloRequest& operator=(HelloRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const HelloRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HelloRequest* internal_default_instance() {
    return reinterpret_cast<const HelloRequest*>(
               &_HelloRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(HelloRequest* other);
  friend void swap(HelloRequest& a, HelloRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HelloRequest* New() const final {
    return CreateMaybeMessage<HelloRequest>(nullptr);
  }

  HelloRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HelloRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HelloRequest& from);
  void MergeFrom(const HelloRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HelloRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:geodesic_gRPC.HelloRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geodesic_2eproto;
};
// -------------------------------------------------------------------

class HelloReply final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:geodesic_gRPC.HelloReply) */ {
 public:
  HelloReply();
  virtual ~HelloReply();

  HelloReply(const HelloReply& from);

  inline HelloReply& operator=(const HelloReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HelloReply(HelloReply&& from) noexcept
    : HelloReply() {
    *this = ::std::move(from);
  }

  inline HelloReply& operator=(HelloReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const HelloReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HelloReply* internal_default_instance() {
    return reinterpret_cast<const HelloReply*>(
               &_HelloReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(HelloReply* other);
  friend void swap(HelloReply& a, HelloReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HelloReply* New() const final {
    return CreateMaybeMessage<HelloReply>(nullptr);
  }

  HelloReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HelloReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HelloReply& from);
  void MergeFrom(const HelloReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HelloReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message = 1;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:geodesic_gRPC.HelloReply)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geodesic_2eproto;
};
// -------------------------------------------------------------------

class FindPathByVertexCordRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:geodesic_gRPC.FindPathByVertexCordRequest) */ {
 public:
  FindPathByVertexCordRequest();
  virtual ~FindPathByVertexCordRequest();

  FindPathByVertexCordRequest(const FindPathByVertexCordRequest& from);

  inline FindPathByVertexCordRequest& operator=(const FindPathByVertexCordRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FindPathByVertexCordRequest(FindPathByVertexCordRequest&& from) noexcept
    : FindPathByVertexCordRequest() {
    *this = ::std::move(from);
  }

  inline FindPathByVertexCordRequest& operator=(FindPathByVertexCordRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const FindPathByVertexCordRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FindPathByVertexCordRequest* internal_default_instance() {
    return reinterpret_cast<const FindPathByVertexCordRequest*>(
               &_FindPathByVertexCordRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(FindPathByVertexCordRequest* other);
  friend void swap(FindPathByVertexCordRequest& a, FindPathByVertexCordRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FindPathByVertexCordRequest* New() const final {
    return CreateMaybeMessage<FindPathByVertexCordRequest>(nullptr);
  }

  FindPathByVertexCordRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FindPathByVertexCordRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FindPathByVertexCordRequest& from);
  void MergeFrom(const FindPathByVertexCordRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FindPathByVertexCordRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string algo_type = 1;
  void clear_algo_type();
  static const int kAlgoTypeFieldNumber = 1;
  const ::std::string& algo_type() const;
  void set_algo_type(const ::std::string& value);
  #if LANG_CXX11
  void set_algo_type(::std::string&& value);
  #endif
  void set_algo_type(const char* value);
  void set_algo_type(const char* value, size_t size);
  ::std::string* mutable_algo_type();
  ::std::string* release_algo_type();
  void set_allocated_algo_type(::std::string* algo_type);

  // string v1 = 2;
  void clear_v1();
  static const int kV1FieldNumber = 2;
  const ::std::string& v1() const;
  void set_v1(const ::std::string& value);
  #if LANG_CXX11
  void set_v1(::std::string&& value);
  #endif
  void set_v1(const char* value);
  void set_v1(const char* value, size_t size);
  ::std::string* mutable_v1();
  ::std::string* release_v1();
  void set_allocated_v1(::std::string* v1);

  // string v2 = 3;
  void clear_v2();
  static const int kV2FieldNumber = 3;
  const ::std::string& v2() const;
  void set_v2(const ::std::string& value);
  #if LANG_CXX11
  void set_v2(::std::string&& value);
  #endif
  void set_v2(const char* value);
  void set_v2(const char* value, size_t size);
  ::std::string* mutable_v2();
  ::std::string* release_v2();
  void set_allocated_v2(::std::string* v2);

  // @@protoc_insertion_point(class_scope:geodesic_gRPC.FindPathByVertexCordRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr algo_type_;
  ::google::protobuf::internal::ArenaStringPtr v1_;
  ::google::protobuf::internal::ArenaStringPtr v2_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geodesic_2eproto;
};
// -------------------------------------------------------------------

class Path final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:geodesic_gRPC.Path) */ {
 public:
  Path();
  virtual ~Path();

  Path(const Path& from);

  inline Path& operator=(const Path& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Path(Path&& from) noexcept
    : Path() {
    *this = ::std::move(from);
  }

  inline Path& operator=(Path&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Path& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Path* internal_default_instance() {
    return reinterpret_cast<const Path*>(
               &_Path_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Path* other);
  friend void swap(Path& a, Path& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Path* New() const final {
    return CreateMaybeMessage<Path>(nullptr);
  }

  Path* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Path>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Path& from);
  void MergeFrom(const Path& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Path* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float path = 1;
  int path_size() const;
  void clear_path();
  static const int kPathFieldNumber = 1;
  float path(int index) const;
  void set_path(int index, float value);
  void add_path(float value);
  const ::google::protobuf::RepeatedField< float >&
      path() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_path();

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // @@protoc_insertion_point(class_scope:geodesic_gRPC.Path)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > path_;
  mutable std::atomic<int> _path_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_geodesic_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HelloRequest

// string name = 1;
inline void HelloRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HelloRequest::name() const {
  // @@protoc_insertion_point(field_get:geodesic_gRPC.HelloRequest.name)
  return name_.GetNoArena();
}
inline void HelloRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:geodesic_gRPC.HelloRequest.name)
}
#if LANG_CXX11
inline void HelloRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:geodesic_gRPC.HelloRequest.name)
}
#endif
inline void HelloRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:geodesic_gRPC.HelloRequest.name)
}
inline void HelloRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:geodesic_gRPC.HelloRequest.name)
}
inline ::std::string* HelloRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:geodesic_gRPC.HelloRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HelloRequest::release_name() {
  // @@protoc_insertion_point(field_release:geodesic_gRPC.HelloRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HelloRequest::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:geodesic_gRPC.HelloRequest.name)
}

// -------------------------------------------------------------------

// HelloReply

// string message = 1;
inline void HelloReply::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& HelloReply::message() const {
  // @@protoc_insertion_point(field_get:geodesic_gRPC.HelloReply.message)
  return message_.GetNoArena();
}
inline void HelloReply::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:geodesic_gRPC.HelloReply.message)
}
#if LANG_CXX11
inline void HelloReply::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:geodesic_gRPC.HelloReply.message)
}
#endif
inline void HelloReply::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:geodesic_gRPC.HelloReply.message)
}
inline void HelloReply::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:geodesic_gRPC.HelloReply.message)
}
inline ::std::string* HelloReply::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:geodesic_gRPC.HelloReply.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HelloReply::release_message() {
  // @@protoc_insertion_point(field_release:geodesic_gRPC.HelloReply.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HelloReply::set_allocated_message(::std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:geodesic_gRPC.HelloReply.message)
}

// -------------------------------------------------------------------

// FindPathByVertexCordRequest

// string algo_type = 1;
inline void FindPathByVertexCordRequest::clear_algo_type() {
  algo_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FindPathByVertexCordRequest::algo_type() const {
  // @@protoc_insertion_point(field_get:geodesic_gRPC.FindPathByVertexCordRequest.algo_type)
  return algo_type_.GetNoArena();
}
inline void FindPathByVertexCordRequest::set_algo_type(const ::std::string& value) {
  
  algo_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:geodesic_gRPC.FindPathByVertexCordRequest.algo_type)
}
#if LANG_CXX11
inline void FindPathByVertexCordRequest::set_algo_type(::std::string&& value) {
  
  algo_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:geodesic_gRPC.FindPathByVertexCordRequest.algo_type)
}
#endif
inline void FindPathByVertexCordRequest::set_algo_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  algo_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:geodesic_gRPC.FindPathByVertexCordRequest.algo_type)
}
inline void FindPathByVertexCordRequest::set_algo_type(const char* value, size_t size) {
  
  algo_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:geodesic_gRPC.FindPathByVertexCordRequest.algo_type)
}
inline ::std::string* FindPathByVertexCordRequest::mutable_algo_type() {
  
  // @@protoc_insertion_point(field_mutable:geodesic_gRPC.FindPathByVertexCordRequest.algo_type)
  return algo_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FindPathByVertexCordRequest::release_algo_type() {
  // @@protoc_insertion_point(field_release:geodesic_gRPC.FindPathByVertexCordRequest.algo_type)
  
  return algo_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FindPathByVertexCordRequest::set_allocated_algo_type(::std::string* algo_type) {
  if (algo_type != nullptr) {
    
  } else {
    
  }
  algo_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), algo_type);
  // @@protoc_insertion_point(field_set_allocated:geodesic_gRPC.FindPathByVertexCordRequest.algo_type)
}

// string v1 = 2;
inline void FindPathByVertexCordRequest::clear_v1() {
  v1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FindPathByVertexCordRequest::v1() const {
  // @@protoc_insertion_point(field_get:geodesic_gRPC.FindPathByVertexCordRequest.v1)
  return v1_.GetNoArena();
}
inline void FindPathByVertexCordRequest::set_v1(const ::std::string& value) {
  
  v1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:geodesic_gRPC.FindPathByVertexCordRequest.v1)
}
#if LANG_CXX11
inline void FindPathByVertexCordRequest::set_v1(::std::string&& value) {
  
  v1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:geodesic_gRPC.FindPathByVertexCordRequest.v1)
}
#endif
inline void FindPathByVertexCordRequest::set_v1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  v1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:geodesic_gRPC.FindPathByVertexCordRequest.v1)
}
inline void FindPathByVertexCordRequest::set_v1(const char* value, size_t size) {
  
  v1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:geodesic_gRPC.FindPathByVertexCordRequest.v1)
}
inline ::std::string* FindPathByVertexCordRequest::mutable_v1() {
  
  // @@protoc_insertion_point(field_mutable:geodesic_gRPC.FindPathByVertexCordRequest.v1)
  return v1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FindPathByVertexCordRequest::release_v1() {
  // @@protoc_insertion_point(field_release:geodesic_gRPC.FindPathByVertexCordRequest.v1)
  
  return v1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FindPathByVertexCordRequest::set_allocated_v1(::std::string* v1) {
  if (v1 != nullptr) {
    
  } else {
    
  }
  v1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), v1);
  // @@protoc_insertion_point(field_set_allocated:geodesic_gRPC.FindPathByVertexCordRequest.v1)
}

// string v2 = 3;
inline void FindPathByVertexCordRequest::clear_v2() {
  v2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FindPathByVertexCordRequest::v2() const {
  // @@protoc_insertion_point(field_get:geodesic_gRPC.FindPathByVertexCordRequest.v2)
  return v2_.GetNoArena();
}
inline void FindPathByVertexCordRequest::set_v2(const ::std::string& value) {
  
  v2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:geodesic_gRPC.FindPathByVertexCordRequest.v2)
}
#if LANG_CXX11
inline void FindPathByVertexCordRequest::set_v2(::std::string&& value) {
  
  v2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:geodesic_gRPC.FindPathByVertexCordRequest.v2)
}
#endif
inline void FindPathByVertexCordRequest::set_v2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  v2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:geodesic_gRPC.FindPathByVertexCordRequest.v2)
}
inline void FindPathByVertexCordRequest::set_v2(const char* value, size_t size) {
  
  v2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:geodesic_gRPC.FindPathByVertexCordRequest.v2)
}
inline ::std::string* FindPathByVertexCordRequest::mutable_v2() {
  
  // @@protoc_insertion_point(field_mutable:geodesic_gRPC.FindPathByVertexCordRequest.v2)
  return v2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FindPathByVertexCordRequest::release_v2() {
  // @@protoc_insertion_point(field_release:geodesic_gRPC.FindPathByVertexCordRequest.v2)
  
  return v2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FindPathByVertexCordRequest::set_allocated_v2(::std::string* v2) {
  if (v2 != nullptr) {
    
  } else {
    
  }
  v2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), v2);
  // @@protoc_insertion_point(field_set_allocated:geodesic_gRPC.FindPathByVertexCordRequest.v2)
}

// -------------------------------------------------------------------

// Path

// repeated float path = 1;
inline int Path::path_size() const {
  return path_.size();
}
inline void Path::clear_path() {
  path_.Clear();
}
inline float Path::path(int index) const {
  // @@protoc_insertion_point(field_get:geodesic_gRPC.Path.path)
  return path_.Get(index);
}
inline void Path::set_path(int index, float value) {
  path_.Set(index, value);
  // @@protoc_insertion_point(field_set:geodesic_gRPC.Path.path)
}
inline void Path::add_path(float value) {
  path_.Add(value);
  // @@protoc_insertion_point(field_add:geodesic_gRPC.Path.path)
}
inline const ::google::protobuf::RepeatedField< float >&
Path::path() const {
  // @@protoc_insertion_point(field_list:geodesic_gRPC.Path.path)
  return path_;
}
inline ::google::protobuf::RepeatedField< float >*
Path::mutable_path() {
  // @@protoc_insertion_point(field_mutable_list:geodesic_gRPC.Path.path)
  return &path_;
}

// string message = 2;
inline void Path::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Path::message() const {
  // @@protoc_insertion_point(field_get:geodesic_gRPC.Path.message)
  return message_.GetNoArena();
}
inline void Path::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:geodesic_gRPC.Path.message)
}
#if LANG_CXX11
inline void Path::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:geodesic_gRPC.Path.message)
}
#endif
inline void Path::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:geodesic_gRPC.Path.message)
}
inline void Path::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:geodesic_gRPC.Path.message)
}
inline ::std::string* Path::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:geodesic_gRPC.Path.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Path::release_message() {
  // @@protoc_insertion_point(field_release:geodesic_gRPC.Path.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Path::set_allocated_message(::std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:geodesic_gRPC.Path.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace geodesic_gRPC

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_geodesic_2eproto
